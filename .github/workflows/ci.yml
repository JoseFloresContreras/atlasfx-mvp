name: CI

on:
  push:
    branches: [ main, develop, prep/copilot-review ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff isort
    
    - name: Check formatting with black
      run: black --check src/ tests/ scripts/
    
    - name: Check imports with isort
      run: isort --check-only --profile black src/ tests/ scripts/
    
    - name: Lint with ruff
      run: ruff check src/ tests/ scripts/

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pandas-stubs types-PyYAML
    
    - name: Type check with mypy
      run: mypy src/atlasfx --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Don't fail CI on type errors yet

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [lint]  # Run tests only if linting passes
    
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src/atlasfx --cov-report=xml --cov-report=term-missing --cov-fail-under=10
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  validate-schema:
    name: Validate Data Schema
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Validate schema and test fixtures
      run: |
        python -m atlasfx.data.validators --sample tests/fixtures/sample_tick_data.csv --type tick_data

  e2e:
    name: End-to-End Pipeline Test
    runs-on: ubuntu-latest
    needs: [lint, test]  # Run after lint and test pass
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

        # Install package editable without deps to avoid pip resolving pandas-ta
        python -m pip install -e ".[dev]" --no-deps

        # Decide which deps to install depending on Python version.
        # If Python >= 3.12 we install pandas-ta; otherwise skip it.
        # This is a POSIX bash snippet that runs on the GitHub runner.
        if python -c "import sys; sys.exit(0 if sys.version_info >= (3,12) else 1)"; then
          echo "Python >= 3.12 detected: installing full dependencies (including pandas-ta)..."
          pip install pandas pyarrow numpy pyyaml pytest "pandas-ta>=0.3.14b"
        else
          echo "Python < 3.12 detected: installing minimal compatible dependencies (skipping pandas-ta)..."
          pip install pandas pyarrow numpy pyyaml pytest
        fi

    - name: Run e2e pipeline test
      run: |
        python scripts/run_data_pipeline.py tests/fixtures/e2e_pipeline_config.yaml
    
    - name: Verify output file
      run: |
        OUTPUT_FILE="tests/fixtures/e2e_test_output/testusd-pair_ticks.parquet"
        if [ ! -f "$OUTPUT_FILE" ]; then
          echo "❌ Error: Expected output file not found: $OUTPUT_FILE"
          echo "Directory contents:"
          ls -la tests/fixtures/e2e_test_output/ || echo "Output directory does not exist"
          exit 1
        fi
        echo "✅ Success: Output file exists: $OUTPUT_FILE"
        
        # Verify the file is not empty
        FILE_SIZE=$(stat -f%z "$OUTPUT_FILE" 2>/dev/null || stat -c%s "$OUTPUT_FILE" 2>/dev/null)
        if [ "$FILE_SIZE" -eq 0 ]; then
          echo "❌ Error: Output file is empty"
          exit 1
        fi
        echo "✅ Success: Output file size: $FILE_SIZE bytes"

